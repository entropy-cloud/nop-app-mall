<?xml version="1.0" encoding="UTF-8" ?>
<view x:extends="_gen/_LitemallGoods.view.xml" x:schema="/nop/schema/xui/xview.xdef" xmlns:x="/nop/schema/xdsl.xdef">

    <grids>
        <grid id="list">
            <!-- bounded-merge表示继承基础模型的配置，但是仅保留当前指定的col。
                基础模型中有，而当前模型中没有的子节点将会被自动删除
             -->
            <cols x:override="bounded-merge">
                <col id="id"/>

                <!--商品名称-->
                <col id="name"/>

                <!--商品页面商品图片-->
                <col id="picUrl"/>

                <!--商品分享海报-->
                <col id="shareUrl"/>

                <col id="detail" label="详情">
                    <gen-control>
                        <!-- button的label与column的label相冲突，所以这里用wrapper包裹一下。
                            否则column上设置的label将会被button的label所覆盖。
                        -->
                        <wrapper>
                            <body>
                                <button label="查看" actionType="dialog" level="primary">
                                    <dialog title="商品详情" size="md">
                                        <body>
                                            <!-- gen-control中的内容是在服务端动态生成控件内容，因此${}表示的是服务端表达式，
                                            而不是前端AMIS表达式。 ${'$'}{detail|raw}生成到前端成为 ${detail|raw} -->
                                            <tpl tpl="${'$'}{detail|raw}"/>
                                        </body>
                                    </dialog>
                                </button>
                            </body>
                        </wrapper>
                    </gen-control>
                </col>

                <!--专柜价格-->
                <col id="counterPrice"/>

                <!--零售价格-->
                <col id="retailPrice"/>

                <!--是否新品首发，如果设置则可以在新品首发页面展示-->
                <col id="isNew"/>

                <!--是否人气推荐，如果设置则可以在人气推荐页面展示-->
                <col id="isHot"/>

                <!--是否上架-->
                <col id="isOnSale"/>

                <col id="goodsSn" breakpoint="*"/>

                <!--
                gallery的domain为images，它使用galleryComponent返回的json数据来显示。但是在配置时我们仍然使用gallery字段。
                control.xlib在生成AMIS代码时会自动替换。
                -->
                <col id="gallery" breakpoint="*"/>

                <col id="brief" breakpoint="*"/>

                <col id="unit" breakpoint="*"/>

                <col id="keywords" breakpoint="*"/>

                <col id="categoryId" breakpoint="*"/>

                <col id="brandId" breakpoint="*"/>

            </cols>
        </grid>
        <grid id="pick-list"/>
    </grids>

    <forms>
        <form id="query">
            <layout>
                id goodsSn keywords
            </layout>
        </form>
        <form id="view"/>
        <form id="edit" size="lg">
            <layout>
                ========== intro[商品介绍] ================
                goodsSn[商品编号] name[商品名称]
                counterPrice[市场价格]
                isNew[是否新品首发] isHot[是否人气推荐]
                isOnSale[是否上架]
                picUrl[商品页面商品图片]
                gallery[商品宣传图片列表，采用JSON数组格式]
                unit[商品单位，例如件、盒]
                keywords[商品关键字，采用逗号间隔]
                categoryId[商品所属类目ID] brandId[Brandid]
                brief[商品简介]
                detail[商品详细介绍，是富文本格式]

                =========specs[商品规格]=======
                !specifications

                =========goodsProducts[商品库存]=======
                !products

                =========attrs[商品参数]========
                !attributes

            </layout>
            <cells>
                <cell id="unit">
                    <placeholder>件/个/盒</placeholder>
                </cell>

                <cell id="specifications">
                    <gen-control>
                        <input-table addable="@:true" editable="@:true"
                                     removable="@:true" needConfirm="@:false">
                            <columns j:list="true">
                                <input-text name="specification" label="规格名" required="true"/>
                                <input-text name="value" label="规格值" required="true">
                                </input-text>
                                <input-text name="picUrl" label="图片" required="true"/>
                            </columns>
                        </input-table>
                    </gen-control>
                    <selection>id,specification,value,picUrl</selection>
                </cell>

                <cell id="products">
                    <!-- 可以引用外部view模型中的grid来显示子表 -->
                    <view path="/app/mall/pages/LitemallGoodsProduct/LitemallGoodsProduct.view.xml"
                          grid="ref-edit"/>
                </cell>

                <cell id="attributes">
                    <!-- 可以直接引用外部的页面文件来显示子表。但是这种情况下系统无法自动推导出编辑子表时需要获取的字段，
                        因此需要通过selection来控制。
                    -->
                    <view path="/app/mall/pages/LitemallGoods/attributes.page.yaml"/>
                    <selection>id, attribute, value</selection>
                </cell>

            </cells>
        </form>

        <form id="add" x:prototype="edit">
            <!-- 删除从基础模型继承的layout。
               指定了x:prototype，所以会从edit又继承得到layout
            -->
            <layout x:override="remove"/>
        </form>
    </forms>

    <pages>
        <crud name="main">
            <listActions>
                <!--
                修改新增按钮的功能为跳转到新增页面
                -->
                <action id="add-button" x:override="merge-replace" actionType="link" url="/mall-goods-create">

                </action>
            </listActions>

            <!-- bounded-merge表示合并结果在当前模型范围内。基础模型中有，当前模型中没有的子节点，会被自动删除。
                 缺省生成的代码中已经定义了row-update-button和row-delete-button，只是配置了x:abstract=true，
                 因此这里只要声明id，表示启用继承的按钮即可，可以避免编写重复的代码。
             -->
            <rowActions x:override="bounded-merge">
                <!--
                    使用drawer而不是对话框来显示编辑表单
                -->
                <action id="row-update-button" actionType="drawer"/>

                <action id="row-delete-button"/>

            </rowActions>
        </crud>

        <simple name="add" useFormActions="true" panelClassName="no-heading no-border actions-center"
                redirect="/mall-goods-list"
        >
            <actions>
                <action id="cancel" label="取消" actionType="cancel"/>
                <action id="confirm" label="上架" actionType="submit" level="primary">
                    <messages>
                        <success>提交成功</success>
                    </messages>
                </action>
            </actions>
        </simple>
        <picker name="picker"/>
    </pages>
</view>